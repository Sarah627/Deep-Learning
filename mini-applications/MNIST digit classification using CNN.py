# -*- coding: utf-8 -*-
"""ID 202000369 Assignment 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vgpIyu3d3uygbW0I9SyZgdYNhMnJliJT
"""

# Commented out IPython magic to ensure Python compatibility.
import keras
from keras.datasets import mnist
import numpy as np
# %matplotlib inline
from matplotlib import pyplot as plt
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.models import Sequential
from keras.utils import to_categorical

#loading data set from keras 
(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)

print(X_train)

#data processing steps
#Resizing images
X_train = X_train.reshape(60000, 28, 28, 1)
X_test = X_test.reshape(10000, 28, 28, 1)

#visualization 
plt.figure(figsize=(3, 3))
plt.imshow(X_train[1], cmap = "Greys")

# One-Hot Encoding:
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)
print(y_train_one_hot[5])

# Building the model
model = Sequential()
model.add(Conv2D(64, kernel_size=3, activation = 'relu', input_shape=(28,28,1)))
model.add(Conv2D(32, kernel_size=3, activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))
model.add(Flatten())
model.add(Dense(10,activation='softmax'))

#complie the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#fitting the model
_history = model.fit(X_train,y_train_one_hot, validation_data=(X_test,y_test_one_hot), epochs=1)

_history.history.keys()

plt.plot(_history.history['accuracy'])
plt.plot(_history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

#plotting the loss curve
plt.plot(_history.history['loss'])
plt.plot(_history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()