import numpy as np
import random

from matplotlib import pyplot as plt

from sklearn import datasets
from sklearn import svm

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay

!pip install pillow

# Load digits dataset from Sklearn 
dig_data = datasets.load_digits()

print(dig_data.DESCR)

len(dig_data.images)

print(dig_data.images.shape)
print(dig_data.data.shape)

# Visualization of first 10 images (from 0 to 9)
for i in range(10):
    plt.figure(figsize=(3, 3))
    plt.imshow(dig_data.images[i], cmap=plt.cm.gray_r, interpolation='nearest')
    plt.show()

# Reshape the image data in an accessible manner
digits = dig_data.images.reshape((len(dig_data.images), -1))

# shape of digits dataset
digits.shape

# Split the data using sklearn train_test_split
x_train, x_test, y_train, y_test = train_test_split(digits, dig_data.target, 
                                        train_size = 0.7, random_state=1)

#Building the Network
from keras.models import Sequential
from keras.layers import Dense

#building the model : 2 hidden leayer with 64 neurons and one output layer with one neuron
def build_model():
    model = Sequential()
    model.add(Dense(64, activation='relu', input_shape=(x_train.shape[1],)))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(1))
    # using mean square error function as loss function, and mean absolute error as our metric
    model.compile(optimizer='rmsprop',
              loss='mse',
              metrics=['mae'])
    return model

model = build_model()

history = model.fit(x_train, 
                    y_train, 
                    batch_size=16, 
                    epochs=80, 
                    verbose = 0)

test_mse_score, test_mae_score = model.evaluate(x_test, y_test)

#visualizing the training loss
plt.plot(history.history['loss'])
plt.plot(history.history['mae'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

model.evaluate(x_test,y_test)